{"version":3,"sources":["components/Home.js","components/Navbar.js","components/Contact.js","serviceWorker.js","index.js","Router.js"],"names":["Home","CSSTransition","transitionName","transitionEnterTimeout","transitionLeaveTimeout","className","Navbar","to","Contact","useState","email","setEmail","name","setName","message","setMessage","onSubmit","axios","post","htmlFor","type","onChange","e","target","value","id","cols","rows","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAIe,SAASA,IACtB,OACE,kBAACC,EAAA,EAAD,CAAeC,eAAe,UAAUC,uBAAwB,IAAKC,uBAAwB,KAC3F,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,oBACb,oFAEF,kBAAC,IAAD,2BCRO,SAASC,IACtB,OACE,yBAAKD,UAAU,UACb,4BACE,4BACE,kBAAC,IAAD,CAAME,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,cAAT,cAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,c,6BCXK,SAASC,IAAW,IAAD,EACNC,mBAAS,IADH,mBACzBC,EADyB,KAClBC,EADkB,OAERF,mBAAS,IAFD,mBAEzBG,EAFyB,KAEnBC,EAFmB,OAGDJ,mBAAS,IAHR,mBAGzBK,EAHyB,KAGhBC,EAHgB,KAShC,OACE,6BACE,0BAAMC,SANO,WACfC,IAAMC,KAAK,+BAAgC,CAAER,QAAOE,OAAME,cAMtD,2BAAOK,QAAQ,QAAf,SACA,2BAAOC,KAAK,OAAOR,KAAK,OAAOS,SAAU,SAACC,GAAQT,EAAQS,EAAEC,OAAOC,QAASA,MAAOZ,IACnF,2BAAOO,QAAQ,SAAf,UACA,2BAAOC,KAAK,OAAOR,KAAK,QAAQS,SAAU,SAACC,GAAQX,EAASW,EAAEC,OAAOC,QAASA,MAAOd,IACrF,2BAAOS,QAAQ,WAAf,YACA,8BACEP,KAAK,UACLa,GAAG,UACHC,KAAK,KACLC,KAAK,KACLN,SAAU,SAACC,GAAQP,EAAWO,EAAEC,OAAOC,QACvCA,MAAOV,GAET,2BAAOM,KAAK,SAASI,MAAM,cChBfI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCAD,WACb,OACE,kBAAC,IAAD,KACE,yBAAK7B,UAAU,aACb,kBAACC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,IAAIC,UAAWrC,IACjC,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,WAAWC,UAAW7B,SDPlC,MAAY8B,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.67d802a6.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { CSSTransition } from 'react-transition-group';\n\nexport default function Home() {\n  return (\n    <CSSTransition transitionName=\"section\" transitionEnterTimeout={250} transitionLeaveTimeout={200}>\n      <div className=\"section-container\">\n        <div className=\"speach-container\">\n          <p>Hello, I am Daniel Garcia a Full Stack Web Developer</p>\n        </div>\n        <Link>View my projects</Link>\n      </div>\n    </CSSTransition>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function Navbar() {\n  return (\n    <nav className=\"navbar\">\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/portfolio\">Portfolio</Link>\n        </li>\n        <li>\n          <Link to=\"/contact\">Contact</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n","import React, { useState } from 'react'\nimport axios from 'axios'\n\nexport default function Contact() {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [message, setMessage ] = useState('');\n\n  const onSubmit = () => {\n    axios.post('http://localhost:3000/mailer', { email, name, message });\n  }\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <label htmlFor=\"name\">Name:</label>\n        <input type=\"text\" name=\"name\" onChange={(e) => { setName(e.target.value)}} value={name} />\n        <label htmlFor=\"email\">Email:</label>\n        <input type=\"text\" name=\"email\" onChange={(e) => { setEmail(e.target.value)}} value={email} />\n        <label htmlFor=\"message\">Message:</label>\n        <textarea \n          name=\"message\" \n          id=\"message\" \n          cols=\"30\" \n          rows=\"10\" \n          onChange={(e) => { setMessage(e.target.value)}}             \n          value={message}\n        >\n        <input type=\"submit\" value=\"Submit\"/>\n        </textarea>\n      </form>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport Navbar from './components/Navbar'\nimport Contact from './components/Contact';\n\nexport default function Router() {\n  return (\n    <BrowserRouter>\n      <div className=\"container\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/contact\" component={Contact} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n"],"sourceRoot":""}